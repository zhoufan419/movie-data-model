library(ggplot2)
# TODO: Remove all rows from df that do not correspond to movies
df = subset(df, Type == 'movie')
# TODO: Remove rows with missing Gross value
df = subset(df, is.na(Gross) == 0)
# TODO: Exclude movies released prior to 2000
release_year = rep(0, times=nrow(df))
for (i in 1:nrow(df)) {
if (is.na(df$Released[i])==0) {
temp = unlist(strsplit(as.character(df$Released[i]),split='-'))[1]
release_year[i] = as.numeric(temp) #this step is optional.
}
}
df$release_year = release_year
df = subset(df, release_year<2000 & release_year>0)
# TODO: Remove mismatched rows
df = subset(df, release_year == Date)
# TODO: Exclude the `Domestic_Gross` column
df = subset(df, select = -Domestic_Gross)
# TODO: Replace df$Runtime with a numeric column containing the runtime in minutes
names(df)[names(df)=='Runtime']='Old_Runtime'
convert_to_min = function(x) {
if (x=='N/A') time = NA
else {
temp = unlist(strsplit(x, split=' '))
if (length(temp)==4 & temp[2]=='h' & temp[4]=='min') {
time=as.numeric(temp[1])*60+as.numeric(temp[3])
} else if (temp[2]=='h' & length(temp)==2) {
time=as.numeric(temp[1])*60
} else {time=as.numeric(temp[1])
}
}
return (time)
}
for (i in 1:nrow(df)) {
df$Runtime[i] = convert_to_min(df$Old_Runtime[i])
}
df = subset(df, select = -Old_Runtime)
# TODO(optional): Additional preprocessing
# TODO: Convert Awards to 2 numeric columns: wins and nominations
wins = c()
nominations = c()
for (i in 1:nrow(df)) {
temp_wins=0
temp_nominations=0
if (df$Awards[i] !='N/A') {
temp = unlist(strsplit(df$Awards[i],' '))
j=1
for (j in 1:length(temp)) {
if (temp[j] == 'wins' | temp[j] == 'win' | temp[j] =='wins.') temp_wins = temp_wins+as.numeric(temp[j-1])
if (temp[j] == 'Won') temp_wins = temp_wins+as.numeric(temp[j+1])
if (temp[j] == 'nominations.' | temp[j] == 'nomination.') temp_nominations = temp_nominations+as.numeric(temp[j-1])
if (temp[j] == 'for') temp_nominations = temp_nominations+as.numeric(temp[j+1])
}
}
wins = c(wins,temp_wins)
nominations = c(nominations, temp_nominations)
}
df$wins = wins
df$nominations = nominations
# Split each genre to several items
genre=c()
n=1
for (i in 1:nrow(df)) {
temp = unlist(strsplit(df$Genre[i],', '))
for (j in 1:length(temp)){
genre[n]=temp[j]
n=n+1
}
}
index=duplicated(genre) # remove repeated types
genre=genre[!index]
genre=genre[genre!='N/A'] # remove 'N/A' type
library(hash)
genre_hash = hash(keys=genre, values=1:length(genre)) # a dictionary for all types
for (i in 1:nrow(df)) {
temp_vector = vector(length=length(genre), mode='numeric') # vector [0,0,0...]
if (df$Genre[i]!='N/A') {
temp = unlist(strsplit(df$Genre[i],', '))
for (j in 1:length(temp)) {
temp_vector[values(genre_hash,temp[j])] = 1
}
}
df$genre_vector[i]=paste(temp_vector,collapse='')
}
df$genre_vector = unlist(df$genre_vector)
# Switch genre indicator format from '0000...' to c(0,0,0,0...), and output genre
reverse_genre_hash = hash(keys=values(genre_hash), values=keys(genre_hash))
vector_to_genre = function(str) {
genre = c()
temp = as.numeric(unlist(strsplit(str,split='')))
for (i in 1:length(temp)) {
if (temp[i]==1) genre = c(genre,values(reverse_genre_hash, as.character(i)))
}
genre = paste(genre,collapse=', ')
return (genre)
}
standard_genre=c()
for (i in 1:nrow(df)) {
standard_genre[i] = vector_to_genre(df$genre_vector[i])
}
df$standard_genre = standard_genre
for (i in 1:nrow(df)) {
if (df$genre_vector[i] =='0000000000000000000000000000') df$standard_genre[i]='N/A'
}
# Create multiple columns for each genre
for (i in 1:length(keys(genre_hash))) {
df[,keys(genre_hash)[i]]=0
}
for (i in 1:nrow(df)) {
temp = unlist(strsplit(df$standard_genre[i],split=', '))
for (j in 1:length(temp)) {
df[i,temp[j]]=1
}
}
# Delete unnecessary columns
df = subset(df, select = -c(Plot, Poster, tomatoConsensus, tomatoURL, BoxOffice, Website))
# Delelte rows whose Gross is 0
df = subset(df, Gross!=0)
# Delete rows whose tomatoUserReviews is NA
df = subset(df, is.na(tomatoUserReviews)==0)
# TODO: Print the dimensions of the final preprocessed dataset and column names
print(dim(df))
print(names(df))
# TODO: Build & evaluate model 1 (numeric variables only)
random_sample = function(df, percentage) {
sample_number = sample(dim(df)[1], percentage*(dim(df)[1]))
train_sample = df[sample_number, ]
test_sample = df[-sample_number, ]
return (list(train_sample, test_sample))
}
RMSE_train =c()
RMSE_test = c()
for (i in 1:19) {
for (time in (1:10)) {
data = random_sample(df,i*0.05)
train = data[[1]]
test = data[[2]]
M1 = lm(Gross~imdbVotes+tomatoUserReviews+Budget, train)
theta=coef(M1)
X1 = 1
X2 = test$imdbVotes
X3 = test$tomatoUserReviews
X4 = test$Budget
Y = test$Gross
#Y_predict = theta[1]*X1+theta[2]*X2+theta[3]*X3+theta[4]*X4+theta[5]*X5
Y_test = predict(M1,test)
RMSE_train[time] = sqrt(mean(residuals(M1)^2))
RMSE_test[time] = sqrt(sum((Y-Y_test)^2)/length(Y))
}
RMSE_train[i] = mean(RMSE_train)
RMSE_test[i] = mean(RMSE_test)
}
vis1 = data.frame('train_size'=seq(0.05, 0.95, 0.05),'RMSE_train'=RMSE_train, 'RMSE_test'=RMSE_test)
ggplot(vis1, aes(train_size)) +
geom_line(aes(y = RMSE_train, colour = "RMSE_train")) +
geom_line(aes(y = RMSE_test, colour = "RMSE_test")) +
xlab('Train set size (x100%)') + ylab('RMSE')
# TODO: Build & evaluate model 2 (transformed numeric variables only)
for (i in 1:dim(df)[1]) {
if (df$Budget[i] >= 3000000) {
df$budget_greater_than_3M[i] = 1
}
else df$budget_greater_than_3M[i] = 0
}
#df$budget_greater_than_3M =factor(df$budget_greater_than_3M, levels=c("No", "Yes"), ordered=TRUE)
RMSE_train =c()
RMSE_test = c()
for (i in 1:19) {
for (time in (1:10)) {
data = random_sample(df,i*0.05)
train = data[[1]]
test = data[[2]]
M2 = lm(log(Gross)~log(Budget)+log(imdbVotes)+log(tomatoUserReviews)+budget_greater_than_3M, train)
theta=coef(M2)
#X1 = 1
#X2 = log(test$Budget)
#X3 = log(test$imdbVotes)
#X4 = log(test$tomatoUserReviews)
Y = test$Gross
Y_train = exp(predict(M2, train))
Y_test = exp(predict(M2, test))
RMSE_train[time] = sqrt(sum((train$Gross-Y_train)^2)/length(Y_train))
RMSE_test[time] = sqrt(sum((test$Gross-Y_test)^2)/length(Y_test))
}
RMSE_train[i] = mean(RMSE_train)
RMSE_test[i] = mean(RMSE_test)
}
vis = data.frame('train_size'=seq(0.05, 0.95, 0.05),'RMSE_train'=RMSE_train, 'RMSE_test'=RMSE_test)
ggplot(vis, aes(train_size)) +
geom_line(aes(y = RMSE_train, colour = "RMSE_train")) +
geom_line(aes(y = RMSE_test, colour = "RMSE_test")) +
xlab('Train set size (x100%)') + ylab('RMSE')
# TODO: Build & evaluate model 3 (converted non-numeric variables only)
# Find director names in top 200 gross movies
gross_top = df[order(df$Gross, decreasing = 1),][1:200,] # Sort movies based on the gross and find top 200
top_director=c()
n=1
for (i in 1:nrow(gross_top)) {
temp = unlist(strsplit(gross_top$Director[i],', '))
for (j in 1:length(temp)){
top_director[n]=temp[j]
n=n+1
}
}
index=duplicated(top_director) # remove repeated types
top_director=top_director[!index]
# Check all movies if each one has director name in the top_director array and add such feature.
# Add director name features and initialize them as 0
for (each in top_director) {
df[, each] = 0
}
for (i in 1:nrow(df)) {
temp = unlist(strsplit(df$Director[i],', '))
for (j in 1:length(temp)) {
if (temp[j] %in% top_director) df[i,temp[j]]=1
}
}
# Find actor names from top 100 gross movies
top_actor=c()
n=1
for (i in 1:nrow(gross_top)) {
temp = unlist(strsplit(gross_top$Actors[i],', '))
for (j in 1:1){
top_actor[n]=temp[j]
n=n+1
}
}
index=duplicated(top_actor) # remove repeated types
top_actor=top_actor[!index]
for (each in top_actor) {
df[, each] = 0
}
for (i in 1:nrow(df)) {
temp = unlist(strsplit(df$Actors[i],', '))
for (j in 1:length(temp)) {
if (temp[j] %in% top_actor) df[i,temp[j]]=1
}
}
# Regression
RMSE_train =c()
RMSE_test = c()
for (i in 1:19) {
for (time in (1:10)) {
data = random_sample(df,i*0.05)
train = data[[1]]
test = data[[2]]
modelData = data.frame(train['Gross'],train['wins'], train['nominations'], train['budget_greater_than_3M'], train[,38:100])
M3=lm(Gross ~ ., data=modelData)
testData = data.frame(test['Gross'],test['wins'], test['nominations'],test['budget_greater_than_3M'], test[,38:100])
Y_test = predict(M3,testData)
RMSE_train[time] = sqrt(mean(residuals(M3)^2))
RMSE_test[time] = sqrt(sum((test$Gross-Y_test)^2)/length(Y_test))
}
RMSE_train[i] = mean(RMSE_train)
RMSE_test[i] = mean(RMSE_test)
}
vis3 = data.frame('train_size'=seq(0.05, 0.95, 0.05),'RMSE_train'=RMSE_train, 'RMSE_test'=RMSE_test)
ggplot(vis3, aes(train_size)) +
geom_line(aes(y = RMSE_train, colour = "RMSE_train")) +
geom_line(aes(y = RMSE_test, colour = "RMSE_test")) +
xlab('Train set size (x100%)') + ylab('RMSE')
# TODO: Build & evaluate model 4 (numeric & converted non-numeric variables)
#df_ = subset(df, wins!=0 & nominations!=0)
RMSE_train =c()
RMSE_test = c()
for (i in 1:19) {
for (time in (1:10)) {
data = random_sample(df,i*0.05)
train = data[[1]]
test = data[[2]]
modelData = data.frame(train['Gross'],log(train['Budget']), log(train['imdbVotes']), log(train['tomatoUserReviews']), train['nominations'], train['budget_greater_than_3M'], train[,38:100])
testData = data.frame(test['Gross'],log(test['Budget']),test['budget_greater_than_3M'], log(test['imdbVotes']), log(test['tomatoUserReviews']),test['nominations'], test[,38:100])
M4=lm(log(Gross) ~ ., data=modelData)
M4$coefficients[is.na(M4$coefficients)==1]=0
Y_train = exp(predict(M4, modelData))
Y_test = exp(predict(M4,testData))
RMSE_train[time] = sqrt(sum((train$Gross-Y_train)^2)/length(Y_train))
RMSE_test[time] = sqrt(sum((test$Gross-Y_test)^2)/length(Y_test))
}
RMSE_train[i] = mean(RMSE_train)
RMSE_test[i] = mean(RMSE_test)
}
vis4 = data.frame('train_size'=seq(0.05, 0.95, 0.05),'RMSE_train'=RMSE_train, 'RMSE_test'=RMSE_test)
ggplot(vis4, aes(train_size)) +
geom_line(aes(y = RMSE_train, colour = "RMSE_train")) +
geom_line(aes(y = RMSE_test, colour = "RMSE_test")) +
xlab('Train set size (x100%)') + ylab('RMSE')
# TODO: Build & evaluate model 4 (numeric & converted non-numeric variables)
#df_ = subset(df, wins!=0 & nominations!=0)
RMSE_train =c()
RMSE_test = c()
for (i in 1:19) {
for (time in (1:10)) {
data = random_sample(df,i*0.05)
train = data[[1]]
test = data[[2]]
modelData = data.frame(train['Gross'],log(train['Budget']), log(train['imdbVotes']), log(train['tomatoUserReviews']), train['nominations'], train['budget_greater_than_3M'], train[,38:150])
testData = data.frame(test['Gross'],log(test['Budget']),test['budget_greater_than_3M'], log(test['imdbVotes']), log(test['tomatoUserReviews']),test['nominations'], test[,38:150])
M4=lm(log(Gross) ~ ., data=modelData)
M4$coefficients[is.na(M4$coefficients)==1]=0
Y_train = exp(predict(M4, modelData))
Y_test = exp(predict(M4,testData))
RMSE_train[time] = sqrt(sum((train$Gross-Y_train)^2)/length(Y_train))
RMSE_test[time] = sqrt(sum((test$Gross-Y_test)^2)/length(Y_test))
}
RMSE_train[i] = mean(RMSE_train)
RMSE_test[i] = mean(RMSE_test)
}
vis4 = data.frame('train_size'=seq(0.05, 0.95, 0.05),'RMSE_train'=RMSE_train, 'RMSE_test'=RMSE_test)
ggplot(vis4, aes(train_size)) +
geom_line(aes(y = RMSE_train, colour = "RMSE_train")) +
geom_line(aes(y = RMSE_test, colour = "RMSE_test")) +
xlab('Train set size (x100%)') + ylab('RMSE')
# TODO: Build & evaluate model 4 (numeric & converted non-numeric variables)
#df_ = subset(df, wins!=0 & nominations!=0)
RMSE_train =c()
RMSE_test = c()
for (i in 1:19) {
for (time in (1:10)) {
data = random_sample(df,i*0.05)
train = data[[1]]
test = data[[2]]
modelData = data.frame(train['Gross'],log(train['Budget']), log(train['imdbVotes']), log(train['tomatoUserReviews']), train['nominations'], train['budget_greater_than_3M'], train[,38:39])
testData = data.frame(test['Gross'],log(test['Budget']),test['budget_greater_than_3M'], log(test['imdbVotes']), log(test['tomatoUserReviews']),test['nominations'], test[,38:39])
M4=lm(log(Gross) ~ ., data=modelData)
M4$coefficients[is.na(M4$coefficients)==1]=0
Y_train = exp(predict(M4, modelData))
Y_test = exp(predict(M4,testData))
RMSE_train[time] = sqrt(sum((train$Gross-Y_train)^2)/length(Y_train))
RMSE_test[time] = sqrt(sum((test$Gross-Y_test)^2)/length(Y_test))
}
RMSE_train[i] = mean(RMSE_train)
RMSE_test[i] = mean(RMSE_test)
}
vis4 = data.frame('train_size'=seq(0.05, 0.95, 0.05),'RMSE_train'=RMSE_train, 'RMSE_test'=RMSE_test)
ggplot(vis4, aes(train_size)) +
geom_line(aes(y = RMSE_train, colour = "RMSE_train")) +
geom_line(aes(y = RMSE_test, colour = "RMSE_test")) +
xlab('Train set size (x100%)') + ylab('RMSE')
release_month = c()
for (i in 1:nrow(df)) {
release_month[i] = unlist(strsplit(as.character(df$Released[i]),split='-'))[2]
}
t$release_month = release_month
release_month = c()
for (i in 1:nrow(df)) {
release_month[i] = unlist(strsplit(as.character(df$Released[i]),split='-'))[2]
}
df$release_month = release_month
df$release_month
RMSE_train =c()
RMSE_test = c()
for (i in 1:19) {
for (time in (1:10)) {
data = random_sample(df,i*0.05)
train = data[[1]]
test = data[[2]]
modelData = data.frame(train['Gross'],log(train['Budget']), log(train['imdbVotes']), log(train['tomatoUserReviews']), train['nominations'], train['budget_greater_than_3M'], train[,38:39], train['release_month'])
testData = data.frame(test['Gross'],log(test['Budget']),test['budget_greater_than_3M'], log(test['imdbVotes']), log(test['tomatoUserReviews']),test['nominations'], test[,38:39], train['release_month'])
M4=lm(log(Gross) ~ ., data=modelData)
M4$coefficients[is.na(M4$coefficients)==1]=0
Y_train = exp(predict(M4, modelData))
Y_test = exp(predict(M4,testData))
RMSE_train[time] = sqrt(sum((train$Gross-Y_train)^2)/length(Y_train))
RMSE_test[time] = sqrt(sum((test$Gross-Y_test)^2)/length(Y_test))
}
RMSE_train[i] = mean(RMSE_train)
RMSE_test[i] = mean(RMSE_test)
}
RMSE_train =c()
RMSE_test = c()
for (i in 1:19) {
for (time in (1:10)) {
data = random_sample(df,i*0.05)
train = data[[1]]
test = data[[2]]
modelData = data.frame(train['Gross'],log(train['Budget']), log(train['imdbVotes']), log(train['tomatoUserReviews']), train['nominations'], train['budget_greater_than_3M'], train[,38:39], train['release_month'])
testData = data.frame(test['Gross'],log(test['Budget']),test['budget_greater_than_3M'], log(test['imdbVotes']), log(test['tomatoUserReviews']),test['nominations'], test[,38:39], test['release_month'])
M4=lm(log(Gross) ~ ., data=modelData)
M4$coefficients[is.na(M4$coefficients)==1]=0
Y_train = exp(predict(M4, modelData))
Y_test = exp(predict(M4,testData))
RMSE_train[time] = sqrt(sum((train$Gross-Y_train)^2)/length(Y_train))
RMSE_test[time] = sqrt(sum((test$Gross-Y_test)^2)/length(Y_test))
}
RMSE_train[i] = mean(RMSE_train)
RMSE_test[i] = mean(RMSE_test)
}
class(df$release_month)
df$release_month = as.numeric(release_month)
df$release_month
RMSE_train =c()
RMSE_test = c()
for (i in 1:19) {
for (time in (1:10)) {
data = random_sample(df,i*0.05)
train = data[[1]]
test = data[[2]]
modelData = data.frame(train['Gross'],log(train['Budget']), log(train['imdbVotes']), log(train['tomatoUserReviews']), train['nominations'], train['budget_greater_than_3M'], train[,38:39], train['release_month'])
testData = data.frame(test['Gross'],log(test['Budget']),test['budget_greater_than_3M'], log(test['imdbVotes']), log(test['tomatoUserReviews']),test['nominations'], test[,38:39], test['release_month'])
M4=lm(log(Gross) ~ ., data=modelData)
M4$coefficients[is.na(M4$coefficients)==1]=0
Y_train = exp(predict(M4, modelData))
Y_test = exp(predict(M4,testData))
RMSE_train[time] = sqrt(sum((train$Gross-Y_train)^2)/length(Y_train))
RMSE_test[time] = sqrt(sum((test$Gross-Y_test)^2)/length(Y_test))
}
RMSE_train[i] = mean(RMSE_train)
RMSE_test[i] = mean(RMSE_test)
}
vis4 = data.frame('train_size'=seq(0.05, 0.95, 0.05),'RMSE_train'=RMSE_train, 'RMSE_test'=RMSE_test)
ggplot(vis4, aes(train_size)) +
geom_line(aes(y = RMSE_train, colour = "RMSE_train")) +
geom_line(aes(y = RMSE_test, colour = "RMSE_test")) +
xlab('Train set size (x100%)') + ylab('RMSE')
RMSE_train =c()
RMSE_test = c()
for (i in 1:19) {
for (time in (1:10)) {
data = random_sample(df,i*0.05)
train = data[[1]]
test = data[[2]]
modelData = data.frame(train['Gross'],log(train['Budget']), log(train['imdbVotes']), log(train['tomatoUserReviews']), train['nominations'], train['budget_greater_than_3M'], train[,38:45], train['release_month'])
testData = data.frame(test['Gross'],log(test['Budget']),test['budget_greater_than_3M'], log(test['imdbVotes']), log(test['tomatoUserReviews']),test['nominations'], test[,38:45], test['release_month'])
M4=lm(log(Gross) ~ ., data=modelData)
M4$coefficients[is.na(M4$coefficients)==1]=0
Y_train = exp(predict(M4, modelData))
Y_test = exp(predict(M4,testData))
RMSE_train[time] = sqrt(sum((train$Gross-Y_train)^2)/length(Y_train))
RMSE_test[time] = sqrt(sum((test$Gross-Y_test)^2)/length(Y_test))
}
RMSE_train[i] = mean(RMSE_train)
RMSE_test[i] = mean(RMSE_test)
}
vis4 = data.frame('train_size'=seq(0.05, 0.95, 0.05),'RMSE_train'=RMSE_train, 'RMSE_test'=RMSE_test)
ggplot(vis4, aes(train_size)) +
geom_line(aes(y = RMSE_train, colour = "RMSE_train")) +
geom_line(aes(y = RMSE_test, colour = "RMSE_test")) +
xlab('Train set size (x100%)') + ylab('RMSE')
RMSE_train =c()
RMSE_test = c()
for (i in 1:19) {
for (time in (1:10)) {
data = random_sample(df,i*0.05)
train = data[[1]]
test = data[[2]]
modelData = data.frame(train['Gross'],log(train['Budget']), log(train['imdbVotes']), log(train['tomatoUserReviews']), train['nominations'], train['budget_greater_than_3M'], train[,38:44], train['release_month'])
testData = data.frame(test['Gross'],log(test['Budget']),test['budget_greater_than_3M'], log(test['imdbVotes']), log(test['tomatoUserReviews']),test['nominations'], test[,38:44], test['release_month'])
M4=lm(log(Gross) ~ ., data=modelData)
M4$coefficients[is.na(M4$coefficients)==1]=0
Y_train = exp(predict(M4, modelData))
Y_test = exp(predict(M4,testData))
RMSE_train[time] = sqrt(sum((train$Gross-Y_train)^2)/length(Y_train))
RMSE_test[time] = sqrt(sum((test$Gross-Y_test)^2)/length(Y_test))
}
RMSE_train[i] = mean(RMSE_train)
RMSE_test[i] = mean(RMSE_test)
}
vis4 = data.frame('train_size'=seq(0.05, 0.95, 0.05),'RMSE_train'=RMSE_train, 'RMSE_test'=RMSE_test)
ggplot(vis4, aes(train_size)) +
geom_line(aes(y = RMSE_train, colour = "RMSE_train")) +
geom_line(aes(y = RMSE_test, colour = "RMSE_test")) +
xlab('Train set size (x100%)') + ylab('RMSE')
RMSE_train =c()
RMSE_test = c()
for (i in 1:19) {
for (time in (1:10)) {
data = random_sample(df,i*0.05)
train = data[[1]]
test = data[[2]]
modelData = data.frame(train['Gross'],log(train['Budget']), log(train['imdbVotes']), log(train['tomatoUserReviews']), train['nominations'], train['budget_greater_than_3M'], train[,41:43], train['release_month'])
testData = data.frame(test['Gross'],log(test['Budget']),test['budget_greater_than_3M'], log(test['imdbVotes']), log(test['tomatoUserReviews']),test['nominations'], test[,41:43], test['release_month'])
M4=lm(log(Gross) ~ ., data=modelData)
M4$coefficients[is.na(M4$coefficients)==1]=0
Y_train = exp(predict(M4, modelData))
Y_test = exp(predict(M4,testData))
RMSE_train[time] = sqrt(sum((train$Gross-Y_train)^2)/length(Y_train))
RMSE_test[time] = sqrt(sum((test$Gross-Y_test)^2)/length(Y_test))
}
RMSE_train[i] = mean(RMSE_train)
RMSE_test[i] = mean(RMSE_test)
}
vis4 = data.frame('train_size'=seq(0.05, 0.95, 0.05),'RMSE_train'=RMSE_train, 'RMSE_test'=RMSE_test)
ggplot(vis4, aes(train_size)) +
geom_line(aes(y = RMSE_train, colour = "RMSE_train")) +
geom_line(aes(y = RMSE_test, colour = "RMSE_test")) +
xlab('Train set size (x100%)') + ylab('RMSE')
RMSE_train =c()
RMSE_test = c()
for (i in 1:19) {
for (time in (1:10)) {
data = random_sample(df,i*0.05)
train = data[[1]]
test = data[[2]]
modelData = data.frame(train['Gross'],log(train['Budget']), log(train['imdbVotes']), log(train['tomatoUserReviews']), train['nominations'], train['budget_greater_than_3M']*train[,45],train[,41:43], train['release_month'])
testData = data.frame(test['Gross'],log(test['Budget']),test['budget_greater_than_3M']*test[,45], log(test['imdbVotes']), log(test['tomatoUserReviews']),test['nominations'], test[,41:43], test['release_month'])
M5=lm(log(Gross) ~ ., data=modelData)
M5$coefficients[is.na(M4$coefficients)==1]=0
Y_train = exp(predict(M4, modelData))
Y_test = exp(predict(M4,testData))
RMSE_train[time] = sqrt(sum((train$Gross-Y_train)^2)/length(Y_train))
RMSE_test[time] = sqrt(sum((test$Gross-Y_test)^2)/length(Y_test))
}
RMSE_train[i] = mean(RMSE_train)
RMSE_test[i] = mean(RMSE_test)
}
vis5 = data.frame('train_size'=seq(0.05, 0.95, 0.05),'RMSE_train'=RMSE_train, 'RMSE_test'=RMSE_test)
ggplot(vis5, aes(train_size)) +
geom_line(aes(y = RMSE_train, colour = "RMSE_train")) +
geom_line(aes(y = RMSE_test, colour = "RMSE_test")) +
xlab('Train set size (x100%)') + ylab('RMSE')
